#include <stdio.h>
#include <stdint.h>
#define NUM_ROUNDS 2
#define BLOCK_SIZE 8
#define KEY_SIZE 10
uint8_t key[KEY_SIZE] = {0, 1, 1, 1, 1, 1, 1, 0, 1, 0};
uint8_t initial_permutation(uint8_t plaintext) {
    uint8_t result = 0;
    result |= ((plaintext >> 1) & 0x40);
    result |= ((plaintext >> 2) & 0x20);
    result |= ((plaintext >> 3) & 0x10);
    result |= ((plaintext >> 5) & 0x08);
    result |= ((plaintext >> 0) & 0x04);
    result |= ((plaintext >> 6) & 0x02);
    result |= ((plaintext >> 7) & 0x01);
    result |= ((plaintext << 4) & 0x80);
    return result;
}
uint8_t final_permutation(uint8_t ciphertext) {
    uint8_t result = 0;
    result |= ((ciphertext >> 3) & 0x01);
    result |= ((ciphertext << 1) & 0x02);
    result |= ((ciphertext >> 2) & 0x04);
    result |= ((ciphertext << 2) & 0x08);
    result |= ((ciphertext >> 5) & 0x10);
    result |= ((ciphertext << 3) & 0x20);
    result |= ((ciphertext >> 6) & 0x40);
    result |= ((ciphertext << 4) & 0x80);
    return result;
}
uint8_t sbox(uint8_t input) {
    static const uint8_t sbox_table[4][4] = {
        {1, 0, 3, 2},
        {3, 2, 1, 0},
        {0, 2, 1, 3},
        {3, 1, 3, 2}
    };
    uint8_t row = (input & 0x80) >> 1 | (input & 0x04) >> 2;
    uint8_t col = (input & 0x78) >> 3;
    return sbox_table[row][col];
}
uint8_t round_function(uint8_t input, uint8_t round_key) {
    uint8_t expanded_input = ((input & 0x04) << 3) | (input & 0x3F);
    uint8_t output = sbox(expanded_input ^ round_key);
    return (output << 4) | (input >> 4);
}
void sdes_encrypt(uint8_t *plaintext, uint8_t *ciphertext) {
    uint8_t key_schedule[KEY_SIZE];
    uint8_t counter = 0x00;
    for (int i = 0; i < KEY_SIZE; i++) {
        key_schedule[i] = key[i] ^ counter;
        counter = (counter + 1) % 256;
    }
    uint8_t initial_permuted = initial_permutation(*plaintext);
    uint8_t data = initial_permuted;
    for (int i = 0; i < NUM_ROUNDS; i++) {
        data = round_function(data, key_schedule[i]);
    }
    *ciphertext = final_permutation(data);
}
void sdes_decrypt(uint8_t *ciphertext, uint8_t *plaintext) {
    uint8_t key_schedule[KEY_SIZE];
    uint8_t counter = 0x00;
    for (int i = 0; i < KEY_SIZE; i++) {
        key_schedule[i] = key[i] ^ counter;
        counter = (counter + 1) % 256;
    }
    for (int i = 0; i < KEY_SIZE; i++) {
        key_schedule[i] = key_schedule[KEY_SIZE - 1 - i];
    }
    uint8_t initial_permuted = initial_permutation(*ciphertext);
    uint8_t data = initial_permuted;
    for (int i = 0; i < NUM_ROUNDS; i++) {
        data = round_function(data, key_schedule[i]);
    }
    *plaintext = final_permutation(data);
}
int main() {
    uint8_t plaintext[] = {0b00000001, 0b00000010, 0b00000100};
    uint8_t key[] = {0b01111111, 0b101};
    printf("Plaintext: ");
    for (int i = 0; i < 3; i++) {
        printf("%02X ", plaintext[i]);
    }
    printf("\n");
    uint8_t ciphertext[BLOCK_SIZE];
    for (int i = 0; i < 3; i++) {
        sdes_encrypt(&plaintext[i], &ciphertext[i]);
    }
    printf("Ciphertext: ");
    for (int i = 0; i < 3; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");
    uint8_t decrypted_plaintext[BLOCK_SIZE];
    for (int i = 0; i < 3; i++) {
        sdes_decrypt(&ciphertext[i], &decrypted_plaintext[i]);
    }
    printf("Decrypted Plaintext: ");
    for (int i = 0; i < 3; i++) {
        printf("%02X ", decrypted_plaintext[i]);
    }
    printf("\n");
    return 0;
}
1 comment on commit db33701
